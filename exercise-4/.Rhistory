# What was the 2018 salary of employee 57
salaries[57, 3]
source('~/Desktop/info201/ch9-data-frames/exercise-2/exercise.R')
# What was the 2018 salary of employee 57
salaries[57, 3]
sum(salaries$got_raise)
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the dollar value of the highest raise?
salaries[max(salaries$change)]
# What was the dollar value of the highest raise?
salaries[max(salaries$change)]
# What was the dollar value of the highest raise?
got_biggest_raise <- salaries[salaries$change = max(salaries$change), ]
source('~/Desktop/info201/ch9-data-frames/exercise-3/exercise.R')
highest_raise <- max()
View(USPersonalExpenditure)
source('~/Desktop/info201/ch9-data-frames/exercise-3/exercise.R')
source('~/Desktop/info201/ch9-data-frames/exercise-3/exercise.R')
source('~/Desktop/info201/ch9-data-frames/exercise-3/exercise.R')
source('~/Desktop/info201/ch9-data-frames/exercise-3/exercise.R')
# What are the column names of your dataframe?
colnames(USPE)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPE <- data.frame(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
USPE$1940
# What are the row names of your dataframe?
rownames(USPE)
USPE[, "category"] <- row_names
# Add a column "category" to your data frame that contains the rownames
row_names <- rownames(USPE)
USPE[, "category"] <- row_names
View(USPE)
# Add a column "category" to your data frame that contains the rownames
USPE[, "category"] <- rownames(USPE)
USPE["Personal Care"]
# How much money was spent on personal care in 1940?
sum(USPE["Personal Care",])
USPE["Personal Care",]
# How much money was spent on personal care in 1940?
sum(USPE[["Personal Care",])
USPE[["Personal Care",]]
# How much money was spent on personal care in 1940?
sum(USPE[["Personal Care"]])
USPE[["Personal Care"]]
# How much money was spent on personal care in 1940?
USPE['personal care', X1940]
# How much money was spent on personal care in 1940?
USPE['personal care', 'X1940']
# Add a column "category" to your data frame that contains the rownames
USPE$category <- rownames(USPE)
# What was the highest expenditure category in 1960?
USPE$category[USPE$X1960 == max(USPE$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
USPE$category[USPE$year == min(USPE$year)]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(USPE, lowest_category, X1960)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
lowest_category(X1940)
?paste0
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste('X', year, seq = '')
USPE$category[USPE$col == min(USPE$col)]
}
lowest_category(1940)
paste('X', 190, seq = '')
paste0('X', 190)
paste('X', 190)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
USPE$category[USPE$col == min(USPE$col)]
}
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
USPE$category[USPE[, col] == min(USPE[, col])]
}
lowest_category(1940)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# What was the dollar value of the highest raise?
got_biggest_raise <- salaries[salaries$change == max(salaries$change)]
View(salaries)
# What was the dollar value of the highest raise?
got_biggest_raise <- salaries[salaries$change == max(salaries$change), ]
?while
q
?while (condition) {
}
?node
??node
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
# Create a variable `organization` that contains the `organization` column of
# Confirm that the "organization" column is a vector using the `is.vector()`
setwd("~/Desktop/info201/ch9-data-frames/exercise-4/data")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
setwd("~/Desktop/info201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
source('~/Desktop/info201/ch9-data-frames/exercise-4/exercise.R')
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean_value <- mean(grants$total_amount)
mean_value
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount == max(grants$total_amount))
largest_grant
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
largest_grant
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
smallest_grant
# Which organization received the largest grant?
largest_or <- grants[grants$total_amount == max(grants$total_amount)]
# Which organization received the largest grant?
largest_or <- grants[grants$total_amount == max(grants$total_amount),]
largest_or
# Which organization received the largest grant?
largest_or <- grants[grants$total_amount == largest_grant,]
largest_or
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Which organization received the largest grant?
largest_or <- grants[grants$total_amount == largest_grant]
organization
# Which organization received the largest grant?
largest_or <- organization[grants$total_amount == largest_grant]
largest_or
# Which organization received the smallest grant?
smallest_or <- organization[grants$total_amount == smallest_grant]
# How many grants were awarded in 2010?
awards_num <- length(grants$total_amount[grants$start_year == 2010])
awards_num
